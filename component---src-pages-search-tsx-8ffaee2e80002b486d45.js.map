{"version":3,"sources":["webpack:///./src/pages/search.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["pageQuery","Search","props","posts","data","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","toLocaleLowerCase","indexOf","id","className","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length","PostList","memo","mapPost","map","excerpt","fields","slug","date","tags","mapTag","tag","key","to"],"mappings":"2IAAA,sIAgFaA,GAhFb,UAgFyB,cAqBVC,UAtFA,SAACC,GACd,IAAMC,EAAQD,EAAME,KAAKC,kBAAkBC,MADN,EAEXC,mBAAS,IAA5BC,EAF8B,KAEvBC,EAFuB,OAGCF,oBAAS,GAAxCG,EAH8B,KAGjBC,EAHiB,KAK/BC,EAAgBT,EAAMU,QAAO,SAACC,GAAc,IACxCC,EAASD,EAATC,KACAC,EAAiCD,EAAjCC,YAAaC,EAAoBF,EAApBE,gBACbC,EAAUF,EAAVE,MACFC,EAAaX,EAAMY,oBAEzB,OAAKV,GAAeO,EAAgBG,oBAAoBC,QAAQF,IAAe,GAIxED,EAAME,oBAAoBC,QAAQF,IAAe,KAG1D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKD,MAAM,WACX,yBAAKI,GAAG,UACN,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAIC,KAAMC,MACV,2BACEC,KAAK,OACLC,KAAK,SACLL,GAAG,cACHd,MAAOA,EACPoB,YAAY,SACZC,aAAa,MACbC,WAAS,EACTC,SAAU,SAACC,GACTvB,EAASuB,EAAEC,cAAczB,UAG7B,yBAAKe,UAAU,iBACb,0BACEW,MAAO,CAAEC,QAASzB,EAAc,GAAM,KACtC0B,QAAS,WACPzB,GAAe,KAHnB,YAQA,0BACEuB,MAAO,CAAEC,QAAUzB,EAAoB,IAAN,IACjC0B,QAAS,WACPzB,GAAe,KAHnB,sBAWO,KAAVH,GAAiBI,EAAcyB,OAAgE,KAAvD,0BAAMd,UAAU,aAAhB,qBACzC,kBAAC,IAAD,CAAUpB,MAAiB,KAAVK,EAAeL,EAAQS,S,kCCzElD,qCAUM0B,GAVN,UAUiBC,gBAAK,SAACrC,GAAyB,IAGxCsC,EAFYtC,EAAVC,MAEcsC,KAAI,SAAC3B,GAAc,IAC/BC,EAASD,EAATC,KACA2B,EAAiC3B,EAAjC2B,QAASC,EAAwB5B,EAAxB4B,OAAQ3B,EAAgBD,EAAhBC,YACjB4B,EAASD,EAATC,KACAC,EAAsB7B,EAAtB6B,KAAM3B,EAAgBF,EAAhBE,MAAO4B,EAAS9B,EAAT8B,KAEfC,EAASD,EAAKL,KAAI,SAACO,GACvB,GAAY,cAARA,EAEJ,OACE,wBAAIC,IAAQL,EAAL,IAAaI,EAAOzB,UAAU,OACnC,8BACE,kBAAC,OAAD,CAAM2B,GAAE,SAAWF,GAAnB,IAA+BA,QAMvC,OACE,wBAAIC,IAAKL,EAAMrB,UAAU,QACvB,iCACE,wBAAIA,UAAU,SACZ,kBAAC,OAAD,CAAM2B,GAAIN,GAAO1B,IAEnB,yBAAKK,UAAU,QACb,0BAAMA,UAAU,QAAQsB,GACvBC,EAAKT,QAAsB,cAAZS,EAAK,GAAqB,0BAAMvB,UAAU,YAAhB,KAAsC,KAChF,wBAAIA,UAAU,YAAYwB,IAE5B,0BAAMxB,UAAU,WACd,kBAAC,OAAD,CAAM2B,GAAIN,GAAOF,SAM3B,OACE,yBAAKnB,UAAU,aACb,4BAAKiB,QAKIF","file":"component---src-pages-search-tsx-8ffaee2e80002b486d45.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport './styles/search.scss';\n\nexport interface SearchProps {\n  data: any;\n}\n\nconst Search = (props: SearchProps) => {\n  const posts = props.data.allMarkdownRemark.edges;\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts = posts.filter((post: any) => {\n    const { node } = post;\n    const { frontmatter, rawMarkdownBody } = node;\n    const { title } = frontmatter;\n    const lowerValue = value.toLocaleLowerCase();\n\n    if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().indexOf(lowerValue) > -1) {\n      return true;\n    }\n\n    return title.toLocaleLowerCase().indexOf(lowerValue) > -1;\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n","import React from 'react';\nimport { memo } from 'react';\nimport { Link } from 'gatsby';\n\nimport './postList.scss';\n\nexport interface PostListProps {\n  posts: any;\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props;\n\n  const mapPost = posts.map((post: any) => {\n    const { node } = post;\n    const { excerpt, fields, frontmatter } = node;\n    const { slug } = fields;\n    const { date, title, tags } = frontmatter;\n\n    const mapTag = tags.map((tag: String) => {\n      if (tag === 'undefined') return;\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n          </span>\n        </li>\n      );\n    });\n\n    return (\n      <li key={slug} className=\"post\">\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug}>{title}</Link>\n          </h2>\n          <div className=\"info\">\n            <span className=\"date\">{date}</span>\n            {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug}>{excerpt}</Link>\n          </span>\n        </article>\n      </li>\n    );\n  });\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  );\n});\n\nexport default PostList;\n"],"sourceRoot":""}