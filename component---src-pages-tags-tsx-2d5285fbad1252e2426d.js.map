{"version":3,"sources":["webpack:///./src/components/PostList/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["PostList","memo","props","mapPost","posts","map","post","node","excerpt","fields","frontmatter","slug","date","title","tags","mapTag","tag","key","className","to","length","pageQuery","Tags","group","data","allMarkdownRemark","useState","largeCount","setLargeCount","targetTag","setTargetTag","sort","a","b","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","useEffect","large","location","hash","split","id","filter","edges"],"mappings":"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","file":"component---src-pages-tags-tsx-2d5285fbad1252e2426d.js","sourcesContent":["import React from 'react';\nimport { memo } from 'react';\nimport { Link } from 'gatsby';\n\nimport './postList.scss';\n\nexport interface PostListProps {\n  posts: any;\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props;\n\n  const mapPost = posts.map((post: any) => {\n    const { node } = post;\n    const { excerpt, fields, frontmatter } = node;\n    const { slug } = fields;\n    const { date, title, tags } = frontmatter;\n\n    const mapTag = tags.map((tag: String) => {\n      if (tag === 'undefined') return;\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n          </span>\n        </li>\n      );\n    });\n\n    return (\n      <li key={slug} className=\"post\">\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug}>{title}</Link>\n          </h2>\n          <div className=\"info\">\n            <span className=\"date\">{date}</span>\n            {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug}>{excerpt}</Link>\n          </span>\n        </article>\n      </li>\n    );\n  });\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  );\n});\n\nexport default PostList;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\nexport interface TagsPageProps {\n  data: any;\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { group } = props.data.allMarkdownRemark;\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState('undefined');\n\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `1.${fontSize}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '1rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  tagList.sort((a: React.ReactElement) => {\n    if (a.key === 'undefined') return -1;\n    return 0;\n  });\n\n  const getPostList = () => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges;\n    }\n    return [];\n  };\n\n  useEffect(() => {\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\n    }\n    setLargeCount(large);\n\n    return () => {};\n  }, [group]);\n\n  useEffect(() => {\n    if (location.hash) setTargetTag(location.hash.split('#')[1]);\n    return () => {};\n  }, []);\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={getPostList()} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}