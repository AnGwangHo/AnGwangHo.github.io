{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## JSP에서 Github autopush 환경 만들기\n\n### 개발환경\n\n- Server : Tomcat8\n- OS : window10\n\n### 구현\n\n- DB에 Data가 갱신될 때 마다 Github 저장소에 auto push 기능을 구현하고자 하였다.\n- 이를 위해서 우선적으로 bat파일을 만들어 jsp환경에서 성공적으로 DB에 Update 시 실행하도록 하였다.\n\n  <details>\n  <summary>batch 파일 코드</summary>\n\n  ```Shell\n    F: #batch파일이 존재하는 드라이브 위치\n    cd 'batch가 위치할 폴더 경로' #batch 파일이 위치 할 폴더 경로\n    git add . #git에 변경된 사항에 대해서 스테이징 한다.\n    git commit -m \"auto push(file upload)\" #commit실행\n    git push origin master #git 저장소에 push\n  ```\n\n</details>\n\n- jsp에서 Runtime의 exec함수를 사용하여 batch파일을 실행하도록 코드를 작성하였다.\n\n  ```java\n  <%@ page import=\"java.lang.Runtime\"%> //Runtime import\n\n  Process process = Runtime.getRuntime().exec(\"파일경로\");\n  process.waitFor(); //batch파일이 실행되기 까지 대기\n\n  //Option : 실행 결과에대해서 알고 싶은 경우 구현\n  BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\n  String line = null;\n\n  while((line = br.readLine()) != null){\n      out.println(line);\n  }\n  br.close();\n  //Option 끝\n\n  process.destroy(); //완료된 프로세스 제거\n  ```\n\n### 이슈\n\n- batch파일을 터미널에서 실행 시 정상적으로 수행되었으나 jsp코드 상 실행 시 무한 loop가 걸리는 문제가 존재하였다. 이에 대하여 line별 실행 해본 결과 push과정에서 문제가 발생하였다.\n- 이와 관련된 문제를 찾아본 결과 권한 문제. 즉, 로그인 문제인걸로 방향을 잡고 SSH keys를 발급하여 GitHub 계정에 등록하였다. 그러나 문제가 해결되지 않았다.\n- 이와 관련된, 문제에 대해서 찾아도 나오지 않아 프로젝트 문제인걸로 방향을 잡고 새로운 저장소를 생성하여 실행하였으나 결과는 같았다. 그때, 실수로 branch를 새로 생성하였는데 이 후로 push 실행 시 수행되는 것을 확인하였다!😮\n- SSH Keys를 발급 후 push를 수행한 경우 자동적으로 권한 취득이 되어 아이디/패스워드 미입력이 되는줄 알았는데 아니었나보다...\n- 만약, 이와 같은 증상을 겪는사람이 있다면 SSH Keys등록 후 브랜치를 하나 생성해보길 바란다.\n\n### 참고 사이트\n\n- [Pushing to Git returning Error Code 403 fatal: HTTP request failed](https://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed)\n","excerpt":"JSP에서 Github autopush 환경 만들기 개발환경 Server : Tomcat8 OS : window10 구현 DB에 Data가 갱신될 때 마다 Github 저장소에 auto push 기능을 구현하고자 하였다. 이를 위해서 우선적으로 bat…","fields":{"slug":"/JSP batch/"},"frontmatter":{"date":"Mar 04, 2020","title":"JSP에서 batch 실행하기","tags":["JSP","batch","github","autopush"]}}},{"node":{"rawMarkdownBody":"\n## split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제\n\n고객이 네트워크 속도 문제로 인해 필요없는 파일을 load하지 않기로 하였다. 이에 대해서 특정 js파일을 load제외하였는데 그로인해 IE8에서 textsize를 계산할 때 다른점이 발견되었다. 이러한 부분을 조사 중 IE8에서 split()에 정규식 공백문자(\" \")를 사용 시 반환되는 배열에 empty string(\"\")값이 제외되는 문제가 발생하였다.\n\n<details>\n<summary>💡 String.split() syntax</summary>\n\n```javascript\nString.split([separator[, limit]])\nseparator : 끊을 문자 or 정규식\nlimit : 몇 개 까지 자를 지에 대한 숫자\n```\n\n</details>\n\n만약 \" ab c d e fg 123 \"와 같은 문자열이 있다고 하자. 이 문자열에 대하여 \" \" 공백문자를 기준으로 자르고자 한다. 그렇다면 split()함수에 \" \"공백을 인자로 사용 시 \"\"을 포함한 배열이 반환 될 것이다. 근데, 만약 정규식을 사용 한다면 어떻게 될까?\n\n보통 정규식을 사용 시 다음과 같이 사용을 할 것이다\n\n```javascript\nvar reg = /abc/;\nvar reg = new RegExp('abc');\n```\n\n두 방식의 차이는 컴파일 시점의 차이로 첫 번째 방식의 경우 스크립트가 load되는 시점에 컴파일 되며 두 번째의 경우는 정규식이 실행되는 시점에 컴파일 된다. 만약, 상수와 같이 고정된 조건에 대해서 사용하는 경우 첫 번째 방식을 사용하며, 조건이 변경되는 경우는 두 번째 방식을 사용하면 될 것이다.\n\n### 테스트\n\n실행결과의 경우 아래에서 확인 가능하며, 해당 파일은 GitHub 저장소에 업로드되어있다.([**저장소**](https://github.com/AnGwangHo/sampleFile))\n\n<iframe width=\"100%\" height=\"300\" src=\"https://angwangho.github.io/sampleFile/window_method/split.html\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n위 샘플에서 확인하였듯이 split()에 정규식을 사용하게 된다면 아래와 같이 empty stirng이 제외된 결과가 나올 것이다.\n\n```javascript\n//IE8 이하\n'   ab c d e   fg 123   '.split(' '); //[\"\", \"\", \"\", \"ab\", \"c\", \"d\", \"e\", \"\", \"\", \"fg\", \"123\", \"\", \"\", \"\"]\n'   ab c d e   fg 123   '.split(/\\s/); //[\"ab\", \"c\", \"d\", \"e\", \"fg\", \"123\"]\n```\n\n위 방식의 경우 동일하게 스페이스 문자를 기준으로 자르도록 하였다. 그러나 결과는 다르게 발생되었다. 문자열로 공백 문자를 인자로 준 경우 empty string값이 포함되어 배열이 반환되었으나 정규식을 사용한 경우 \"\"인 값들이 제외되고 배열이 반환되었다. 이를 해결하고자 다음과 같은 방안을 세우고 시도를 해보았다.\n\n### 해결방안\n\n1. ~~new RegExp(\"\\\\s\")를 사용~~\n   - \"\"값이 제외되어 반환\n2. ~~정규식 문법을 수정~~\n   - 다양한 방법으로 조건을 변경하였으나 \"\"값이 제외되어 반환되었다.  \n     ex) /(\\s)/, /[\\s\\xA0]/, / /g, /[ \\f\\n\\r\\t\\v]/, /\\u0020/(공백문자 유니코드)\n\n위와 같은 해결방안을 세우고 시도하였으나 \"\"값이 제외되고 반환되었다. 따로 해결이 가능한 부분이 없었으며 다음과 같은 결론을 내렸다.\n\n### 처리결과\n\n우선적으로 고객이 제외한 js파일에서 String.split함수에 대해서 오버라이딩이 되어있어 IE8이하에서 split(/\\s/)시 \"\"값이 포함된 배열이 반환되었다. 이러한 부분에 대해서 고객에게 split함수에 대해서 오버라이딩된 코드를 적용하도록 가이드하였다. 만약, 외부에서 IE8이하 브라우저를 지원해야하는 경우가 존재한다면 아래의 코드를 적용하면 된다.\n\n<details><summary>코드</summary>\n\n```javascript\n/*!\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Available under the MIT License\n * ECMAScript compliant, uniform cross-browser split method\n */\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * split('a b c d', ' ');\n * // -> ['a', 'b', 'c', 'd']\n *\n * // With limit\n * split('a b c d', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * split('..word1 word2..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', ' ', 'word', '2', '..']\n */\nvar split;\n\n// Avoid running twice; that would break the `nativeSplit` reference\nsplit =\n  split ||\n  (function(undef) {\n    var nativeSplit = String.prototype.split,\n      compliantExecNpcg = /()??/.exec('')[1] === undef, // NPCG: nonparticipating capturing group\n      self;\n\n    self = function(str, separator, limit) {\n      // If `separator` is not a regex, use `nativeSplit`\n      if (Object.prototype.toString.call(separator) !== '[object RegExp]') {\n        return nativeSplit.call(str, separator, limit);\n      }\n      var output = [],\n        flags =\n          (separator.ignoreCase ? 'i' : '') +\n          (separator.multiline ? 'm' : '') +\n          (separator.extended ? 'x' : '') + // Proposed for ES6\n          (separator.sticky ? 'y' : ''), // Firefox 3+\n        lastLastIndex = 0,\n        // Make `global` and avoid `lastIndex` issues by working with a copy\n        separator = new RegExp(separator.source, flags + 'g'),\n        separator2,\n        match,\n        lastIndex,\n        lastLength;\n      str += ''; // Type-convert\n      if (!compliantExecNpcg) {\n        // Doesn't need flags gy, but they don't hurt\n        separator2 = new RegExp('^' + separator.source + '$(?!\\\\s)', flags);\n      }\n      /* Values for `limit`, per the spec:\n       * If undefined: 4294967295 // Math.pow(2, 32) - 1\n       * If 0, Infinity, or NaN: 0\n       * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n       * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n       * If other: Type-convert, then use the above rules\n       */\n      limit =\n        limit === undef\n          ? -1 >>> 0 // Math.pow(2, 32) - 1\n          : limit >>> 0; // ToUint32(limit)\n      while ((match = separator.exec(str))) {\n        // `separator.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0].length;\n        if (lastIndex > lastLastIndex) {\n          output.push(str.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for\n          // nonparticipating capturing groups\n          if (!compliantExecNpcg && match.length > 1) {\n            match[0].replace(separator2, function() {\n              for (var i = 1; i < arguments.length - 2; i++) {\n                if (arguments[i] === undef) {\n                  match[i] = undef;\n                }\n              }\n            });\n          }\n          if (match.length > 1 && match.index < str.length) {\n            Array.prototype.push.apply(output, match.slice(1));\n          }\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= limit) {\n            break;\n          }\n        }\n        if (separator.lastIndex === match.index) {\n          separator.lastIndex++; // Avoid an infinite loop\n        }\n      }\n      if (lastLastIndex === str.length) {\n        if (lastLength || !separator.test('')) {\n          output.push('');\n        }\n      } else {\n        output.push(str.slice(lastLastIndex));\n      }\n      return output.length > limit ? output.slice(0, limit) : output;\n    };\n\n    // For convenience\n    String.prototype.split = function(separator, limit) {\n      return self(this, separator, limit);\n    };\n\n    return self;\n  })();\n```\n\n</details>\n\n### 참고자료\n\n1. 정규식 테스트 사이트\n\n   [Non breaking space - Regex Tester/Debugger](https://www.regextester.com/105851)\n\n2. MS 공식 사이트\n\n   [Regular Expression Syntax (Scripting)](<https://docs.microsoft.com/en-us/previous-versions//1400241x(v=vs.85)?redirectedfrom=MSDN>)\n\n3. split 함수 재정의코드\n\n   [JavaScript split Bugs: Fixed!](http://blog.stevenlevithan.com/archives/cross-browser-split)\n","excerpt":"split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제 고객이 네트워크 속도 문제로 인해 필요없는 파일을 load하지 않기로 하였다. 이에 대해서 특정 js파일을 load제외하였는데 그로인해 IE8에서 textsize…","fields":{"slug":"/IE8-Split-Bug/"},"frontmatter":{"date":"Mar 03, 2020","title":"IE8 Split Bug","tags":["IE","Split","Browser Bug"]}}}]}},"pageContext":{}}}