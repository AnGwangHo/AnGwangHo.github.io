{"componentChunkName":"component---src-templates-post-tsx","path":"/algorithm-bracketchange/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"center2020-kakao-blind-recruitment-괄호-변환center\" style=\"position:relative;\"><a href=\"#center2020-kakao-blind-recruitment-%EA%B4%84%ED%98%B8-%EB%B3%80%ED%99%98center\" aria-label=\"center2020 kakao blind recruitment 괄호 변환center permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><center>[2020 KAKAO BLIND RECRUITMENT] 괄호 변환</center></h2>\n<p><strong><center>javascript</center></strong></p>\n<hr>\n<h3 id=\"조건\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4\" aria-label=\"조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건</h3>\n<blockquote>\n<ul>\n<li>p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.</li>\n<li>문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.</li>\n<li>만약 p가 이미 올바른 괄호 문자열이라면 그대로 return 하면 됩니다.</li>\n</ul>\n</blockquote>\n<h3 id=\"조건사항\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EC%82%AC%ED%95%AD\" aria-label=\"조건사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건사항</h3>\n<blockquote>\n<ul>\n<li>'(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.</li>\n<li>'('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.</li>\n<li>예를 들어, \"(()))(\"와 같은 문자열은 균형잡힌 괄호 문자열 이지만 올바른 괄호 문자열은 아닙니다.</li>\n<li>반면에 \"(())()\"와 같은 문자열은 균형잡힌 괄호 문자열 이면서 동시에 올바른 괄호 문자열 입니다.</li>\n<li>입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.</li>\n<li>문자열 w를 두 \"균형잡힌 괄호 문자열\" u, v로 분리합니다. 단, u는 \"균형잡힌 괄호 문자열\"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.</li>\n<li>\n<p>문자열 u가 \"올바른 괄호 문자열\" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다.</p>\n<ul>\n<li>수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p>문자열 u가 \"올바른 괄호 문자열\"이 아니라면 아래 과정을 수행합니다.</p>\n<ul>\n<li>빈 문자열에 첫 번째 문자로 '('를 붙입니다.</li>\n<li>문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.</li>\n<li>')'를 다시 붙입니다.</li>\n<li>u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.</li>\n<li>생성된 문자열을 반환합니다.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"입출력-예\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h3>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>p</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\"(()())()\"</td>\n<td>\"(()())()\"</td>\n</tr>\n<tr>\n<td>\")(\"</td>\n<td>\"()\"</td>\n</tr>\n<tr>\n<td>\"()))((()\"</td>\n<td>\"()(())()\"</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//1. Logic 수행</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Stack을 사용하여 균형잡힌 괄호 문자열 분리</span>\n    <span class=\"token keyword\">let</span> u<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> v<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2. Logic 수행</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> now_char <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//현재 비교할 문자(자주 사용하는 Data의 경우 유지보수 측면을 위하여 변수로 담는다)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//최초 수행 시 stack에 push한다</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>now_char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> pre_char <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//stack에 마지막에 들어간 문자</span>\n        <span class=\"token comment\">//전제조건에서 '균형잡힌 괄호 문자열'인 경우까지만 나누면 되므로 '올바른 괄호 문자열'인지는 판단하지 않는다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre_char <span class=\"token operator\">===</span> now_char<span class=\"token punctuation\">)</span> <span class=\"token comment\">//이전 문자와 현재 문자가 같은 경우 [\"(\" == \"(\"] or [\")\" == \")\"] stack에 push한다.</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>now_char<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token comment\">//다른 경우는 [\"(\" != \")\"] or [\")\" != \"(\"]인 경우</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//괄호의 쌍이 맞게 나눈 경우(균형잡힌 괄호 문자열인 경우)</span>\n        <span class=\"token punctuation\">{</span>\n          u <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          v <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//3. Logic 수행</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> u <span class=\"token operator\">+</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3-1. Logic 수행</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token comment\">//4. Logic 수행</span>\n    <span class=\"token punctuation\">{</span>\n      u <span class=\"token operator\">=</span> u<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//4-4. Logic에서 첫 번째, 마지막 문자 제거, 미리 문자열 자르기를하여 혹시 모를 예외방지</span>\n      <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//4-4. Logic에서 변환된 문자열을 담을 임시변수</span>\n      <span class=\"token comment\">//loop에서 i = 1, len = u.length - 1한 경우 예외발생 가능성 있음(문자열이 1인경우)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> u<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//4-4. Logic에서 괄호 방향 뒤집는 loop</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span>\n          temp <span class=\"token operator\">+=</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n          temp <span class=\"token operator\">+=</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//4-1. 4-2. 4-3. 4-4. 수행</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> u <span class=\"token operator\">+</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//4-5. 수행</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>출처: 프로그래머스 코딩 테스트 연습, <a href=\"https://programmers.co.kr/learn/challenges\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://programmers.co.kr/learn/challenges</a></p>","excerpt":"2020 KAKAO BLIND RECRUITMENT 괄호 변환 javascript 조건 p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다. 문자열 p…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/algorithm-bracketchange/#center2020-kakao-blind-recruitment-%EA%B4%84%ED%98%B8-%EB%B3%80%ED%99%98center\"><center>2020 KAKAO BLIND RECRUITMENT 괄호 변환</center></a></p>\n<ul>\n<li><a href=\"/algorithm-bracketchange/#%EC%A1%B0%EA%B1%B4\">조건</a></li>\n<li><a href=\"/algorithm-bracketchange/#%EC%A1%B0%EA%B1%B4%EC%82%AC%ED%95%AD\">조건사항</a></li>\n<li><a href=\"/algorithm-bracketchange/#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\">입출력 예</a></li>\n<li><a href=\"/algorithm-bracketchange/#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/algorithm-bracketchange/"},"frontmatter":{"title":"괄호 변환(javascript)","date":"Mar 19, 2020","tags":["알고리즘","프로그래머스","2020 KAKAO BLIND RECRUITMENT"],"keywords":["알고리즘","프로그래머스","괄호 변환","javascript","2020 KAKAO BLIND RECRUITMENT"]}}},"pageContext":{"slug":"/algorithm-bracketchange/","series":[]}}}