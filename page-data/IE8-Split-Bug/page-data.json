{"componentChunkName":"component---src-templates-post-tsx","path":"/IE8-Split-Bug/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"split함수에-regex를-사용-시-값이-return되지-않는-문제\" style=\"position:relative;\"><a href=\"#split%ED%95%A8%EC%88%98%EC%97%90-regex%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B0%92%EC%9D%B4-return%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%AC%B8%EC%A0%9C\" aria-label=\"split함수에 regex를 사용 시 값이 return되지 않는 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제</h2>\n<p>고객이 네트워크 속도 문제로 인해 필요없는 파일을 load하지 않기로 하였다. 이에 대해서 특정 js파일을 load제외하였는데 그로인해 IE8에서 textsize를 계산할 때 다른점이 발견되었다. 이러한 부분을 조사 중 IE8에서 split()에 정규식 공백문자(\" \")를 사용 시 반환되는 배열에 empty string(\"\")값이 제외되는 문제가 발생하였다.</p>\n<details>\n<summary>💡 String.split() syntax</summary>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>separator<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nseparator <span class=\"token operator\">:</span> 끊을 문자 or 정규식\nlimit <span class=\"token operator\">:</span> 몇 개 까지 자를 지에 대한 숫자</code></pre></div>\n</details>\n<p>만약 \" ab c d e fg 123 \"와 같은 문자열이 있다고 하자. 이 문자열에 대하여 \" \" 공백문자를 기준으로 자르고자 한다. 그렇다면 split()함수에 \" \"공백을 인자로 사용 시 \"\"을 포함한 배열이 반환 될 것이다. 근데, 만약 정규식을 사용 한다면 어떻게 될까?</p>\n<p>보통 정규식을 사용 시 다음과 같이 사용을 할 것이다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>두 방식의 차이는 컴파일 시점의 차이로 첫 번째 방식의 경우 스크립트가 load되는 시점에 컴파일 되며 두 번째의 경우는 정규식이 실행되는 시점에 컴파일 된다. 만약, 상수와 같이 고정된 조건에 대해서 사용하는 경우 첫 번째 방식을 사용하며, 조건이 변경되는 경우는 두 번째 방식을 사용하면 될 것이다.</p>\n<h3 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>실행결과의 경우 아래에서 확인 가능하며, 해당 파일은 GitHub 저장소에 업로드되어있다.(<a href=\"https://github.com/AnGwangHo/sampleFile\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>저장소</strong></a>)</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://angwangho.github.io/sampleFile/window_method/split.html\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n<p>위 샘플에서 확인하였듯이 split()에 정규식을 사용하게 된다면 아래와 같이 empty stirng이 제외된 결과가 나올 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//IE8 이하</span>\n<span class=\"token string\">'   ab c d e   fg 123   '</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[\"\", \"\", \"\", \"ab\", \"c\", \"d\", \"e\", \"\", \"\", \"fg\", \"123\", \"\", \"\", \"\"]</span>\n<span class=\"token string\">'   ab c d e   fg 123   '</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[\"ab\", \"c\", \"d\", \"e\", \"fg\", \"123\"]</span></code></pre></div>\n<p>위 방식의 경우 동일하게 스페이스 문자를 기준으로 자르도록 하였다. 그러나 결과는 다르게 발생되었다. 문자열로 공백 문자를 인자로 준 경우 empty string값이 포함되어 배열이 반환되었으나 정규식을 사용한 경우 \"\"인 값들이 제외되고 배열이 반환되었다. 이를 해결하고자 다음과 같은 방안을 세우고 시도를 해보았다.</p>\n<h3 id=\"해결방안\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EC%95%88\" aria-label=\"해결방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방안</h3>\n<ol>\n<li>\n<p><del>new RegExp(\"\\s\")를 사용</del></p>\n<ul>\n<li>\"\"값이 제외되어 반환</li>\n</ul>\n</li>\n<li>\n<p><del>정규식 문법을 수정</del></p>\n<ul>\n<li>다양한 방법으로 조건을 변경하였으나 \"\"값이 제외되어 반환되었다.<br>\nex) /(\\s)/, /[\\s\\xA0]/, / /g, /[ \\f\\n\\r\\t\\v]/, /\\u0020/(공백문자 유니코드)</li>\n</ul>\n</li>\n</ol>\n<p>위와 같은 해결방안을 세우고 시도하였으나 \"\"값이 제외되고 반환되었다. 따로 해결이 가능한 부분이 없었으며 다음과 같은 결론을 내렸다.</p>\n<h3 id=\"처리결과\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC%EA%B2%B0%EA%B3%BC\" aria-label=\"처리결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리결과</h3>\n<p>우선적으로 고객이 제외한 js파일에서 String.split함수에 대해서 오버라이딩이 되어있어 IE8이하에서 split(/\\s/)시 \"\"값이 포함된 배열이 반환되었다. 이러한 부분에 대해서 고객에게 split함수에 대해서 오버라이딩된 코드를 적용하도록 가이드하였다. 만약, 외부에서 IE8이하 브라우저를 지원해야하는 경우가 존재한다면 아래의 코드를 적용하면 된다.</p>\n<details><summary>코드</summary>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*!\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan &lt;stevenlevithan.com>\n * Available under the MIT License\n * ECMAScript compliant, uniform cross-browser split method\n */</span>\n\n<span class=\"token comment\">/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * split('a b c d', ' ');\n * // -> ['a', 'b', 'c', 'd']\n *\n * // With limit\n * split('a b c d', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * split('..word1 word2..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', ' ', 'word', '2', '..']\n */</span>\n<span class=\"token keyword\">var</span> split<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Avoid running twice; that would break the `nativeSplit` reference</span>\nsplit <span class=\"token operator\">=</span>\n  split <span class=\"token operator\">||</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">undef</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nativeSplit <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">,</span>\n      compliantExecNpcg <span class=\"token operator\">=</span> <span class=\"token regex\">/()??/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undef<span class=\"token punctuation\">,</span> <span class=\"token comment\">// NPCG: nonparticipating capturing group</span>\n      self<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">self</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">,</span> limit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If `separator` is not a regex, use `nativeSplit`</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object RegExp]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">nativeSplit</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        flags <span class=\"token operator\">=</span>\n          <span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">.</span>ignoreCase <span class=\"token operator\">?</span> <span class=\"token string\">'i'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">.</span>multiline <span class=\"token operator\">?</span> <span class=\"token string\">'m'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">.</span>extended <span class=\"token operator\">?</span> <span class=\"token string\">'x'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token comment\">// Proposed for ES6</span>\n          <span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">.</span>sticky <span class=\"token operator\">?</span> <span class=\"token string\">'y'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Firefox 3+</span>\n        lastLastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Make `global` and avoid `lastIndex` issues by working with a copy</span>\n        separator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> flags <span class=\"token operator\">+</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        separator2<span class=\"token punctuation\">,</span>\n        match<span class=\"token punctuation\">,</span>\n        lastIndex<span class=\"token punctuation\">,</span>\n        lastLength<span class=\"token punctuation\">;</span>\n      str <span class=\"token operator\">+=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type-convert</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>compliantExecNpcg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Doesn't need flags gy, but they don't hurt</span>\n        separator2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'^'</span> <span class=\"token operator\">+</span> separator<span class=\"token punctuation\">.</span>source <span class=\"token operator\">+</span> <span class=\"token string\">'$(?!\\\\s)'</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">/* Values for `limit`, per the spec:\n       * If undefined: 4294967295 // Math.pow(2, 32) - 1\n       * If 0, Infinity, or NaN: 0\n       * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n       * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n       * If other: Type-convert, then use the above rules\n       */</span>\n      limit <span class=\"token operator\">=</span>\n        limit <span class=\"token operator\">===</span> undef\n          <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">>>></span> <span class=\"token number\">0</span> <span class=\"token comment\">// Math.pow(2, 32) - 1</span>\n          <span class=\"token operator\">:</span> limit <span class=\"token operator\">>>></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ToUint32(limit)</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match <span class=\"token operator\">=</span> separator<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// `separator.lastIndex` is not reliable cross-browser</span>\n        lastIndex <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastIndex <span class=\"token operator\">></span> lastLastIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>lastLastIndex<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// Fix browsers whose `exec` methods don't consistently return `undefined` for</span>\n          <span class=\"token comment\">// nonparticipating capturing groups</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>compliantExecNpcg <span class=\"token operator\">&amp;&amp;</span> match<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>separator2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  match<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> undef<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> match<span class=\"token punctuation\">.</span>index <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          lastLength <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n          lastLastIndex <span class=\"token operator\">=</span> lastIndex<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">===</span> match<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          separator<span class=\"token punctuation\">.</span>lastIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Avoid an infinite loop</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastLastIndex <span class=\"token operator\">===</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastLength <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>separator<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>lastLastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> limit <span class=\"token operator\">?</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> output<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// For convenience</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">split</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">separator<span class=\"token punctuation\">,</span> limit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</details>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<ol>\n<li>\n<p>정규식 테스트 사이트</p>\n<p><a href=\"https://www.regextester.com/105851\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Non breaking space - Regex Tester/Debugger</a></p>\n</li>\n<li>\n<p>MS 공식 사이트</p>\n<p><a href=\"https://docs.microsoft.com/en-us/previous-versions//1400241x(v=vs.85)?redirectedfrom=MSDN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Regular Expression Syntax (Scripting)</a></p>\n</li>\n<li>\n<p>split 함수 재정의코드</p>\n<p><a href=\"http://blog.stevenlevithan.com/archives/cross-browser-split\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript split Bugs: Fixed!</a></p>\n</li>\n</ol>","excerpt":"split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제 고객이 네트워크 속도 문제로 인해 필요없는 파일을 load하지 않기로 하였다. 이에 대해서 특정 js파일을 load제외하였는데 그로인해 IE8에서 textsize…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/IE8-Split-Bug/#split%ED%95%A8%EC%88%98%EC%97%90-regex%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B0%92%EC%9D%B4-return%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%AC%B8%EC%A0%9C\">split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제</a></p>\n<ul>\n<li><a href=\"/IE8-Split-Bug/#%ED%85%8C%EC%8A%A4%ED%8A%B8\">테스트</a></li>\n<li><a href=\"/IE8-Split-Bug/#%ED%95%B4%EA%B2%B0%EB%B0%A9%EC%95%88\">해결방안</a></li>\n<li><a href=\"/IE8-Split-Bug/#%EC%B2%98%EB%A6%AC%EA%B2%B0%EA%B3%BC\">처리결과</a></li>\n<li><a href=\"/IE8-Split-Bug/#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/IE8-Split-Bug/"},"frontmatter":{"title":"IE8 Split Bug","date":"Mar 03, 2020","tags":["IE","Split","Browser Bug"],"keywords":["IE8","Split Bug","Browser Bug"]}}},"pageContext":{"slug":"/IE8-Split-Bug/","series":[]}}}