{"componentChunkName":"component---src-templates-post-tsx","path":"/IE8-Split-Bug/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"split함수에-regex를-사용-시-값이-return되지-않는-문제\" style=\"position:relative;\"><a href=\"#split%ED%95%A8%EC%88%98%EC%97%90-regex%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B0%92%EC%9D%B4-return%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%AC%B8%EC%A0%9C\" aria-label=\"split함수에 regex를 사용 시 값이 return되지 않는 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제</h1>\n<p>고객이 네트워크 속도 문제로 인해 필요없는 파일을 load하지 않기로 하였다. 이에 대해서 특정 js파일을 load제외하였는데 그로인해 IE8에서 textsize를 계산할 때 다른점이 발견되었다.\n이러한 부분을 조사 중 IE8에서 split()에 정규식 공백문자(\" \")를 사용 시 반환되는 배열에 empty string(\"\")값이 제외되는 문제가 발생하였다.</p>\n<ul>\n<li>\n<p>String.split() syntax</p>\n<p>String.split([separator[, limit]])\nseparator : 끊을 문자 or 정규식\nlimit : 몇 개 까지 자를 지에 대한 숫자</p>\n</li>\n</ul>\n<p>만약 \" ab c d e fg 123 \"와 같은 문자열이 있다고 하자. 이 문자열에 대하여 \" \" 공백문자를 기준으로 자르고자 한다. 그렇다면 split()함수에 \" \"공백을 인자로 사용 시 \"\"을 포함한 배열이 반환 될 것이다. 근데, 만약 정규식을 사용 한다면 어떻게 될까?</p>\n<p>보통 정규식을 사용 시 다음과 같이 사용을 할 것이다</p>\n<p>var reg = /abc/;\nvar reg = new RegExp(\"abc\");</p>\n<p>두 방식의 차이는 컴파일 시점의 차이로 첫 번째 방식의 경우 스크립트가 load되는 시점에 컴파일 되며 두 번째의 경우는 정규식이 실행되는 시점에 컴파일 된다. 만약, 상수와 같이 고정된 조건에 대해서 사용하는 경우 첫 번째 방식을 사용하며, 조건이 변경되는 경우는 두 번째 방식을 사용하면 될 것이다.</p>\n<h2 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h2>\n<p>실행결과의 경우 아래에서 확인 가능하며, 해당 파일은 GitHub 저장소에 업로드되어있다.(<a href=\"https://github.com/AnGwangHo/sampleFile\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>저장소</strong></a>)</p>\n<p><a href=\"https://angwangho.github.io/sampleFile/window_method/split.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://angwangho.github.io/sampleFile/window_method/split.html</a></p>\n<p>위 샘플에서 확인하였듯이 split()에 정규식을 사용하게 된다면 아래와 같이 empty stirng이 제외된 결과가 나올 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//IE8 이하\n&quot;   ab c d e   fg 123   &quot;.split(&quot; &quot;); //[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;ab&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;&quot;, &quot;&quot;, &quot;fg&quot;, &quot;123&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]\n&quot;   ab c d e   fg 123   &quot;.split(/\\s/); //[&quot;ab&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;fg&quot;, &quot;123&quot;]</code></pre></div>\n<p>위 방식의 경우 동일하게 스페이스 문자를 기준으로 자르도록 하였다. 그러나 결과는 다르게 발생되었다. 문자열로 공백 문자를 인자로 준 경우 empty string값이 포함되어 배열이 반환되었으나 정규식을 사용한 경우 \"\"인 값들이 제외되고 배열이 반환되었다. 이를 해결하고자 다음과 같은 방안을 세우고 시도를 해보았다.</p>\n<h2 id=\"해결방안\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EC%95%88\" aria-label=\"해결방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방안</h2>\n<ol>\n<li>\n<p><del>new RegExp(\"\\s\")를 사용</del></p>\n<ul>\n<li>\"\"값이 제외되어 반환</li>\n</ul>\n</li>\n<li>\n<p><del>정규식 문법을 수정</del></p>\n<ul>\n<li>다양한 방법으로 조건을 변경하였으나 \"\"값이 제외되어 반환되었다.\nex) /(\\s)/, /[\\s\\xA0]/, / /g, /[ \\f\\n\\r\\t\\v]/, /\\u0020/(공백문자 유니코드)</li>\n</ul>\n</li>\n</ol>\n<p>위와 같은 해결방안을 세우고 시도하였으나 \"\"값이 제외되고 반환되었다. 따로 해결이 가능한 부분이 없었으며 다음과 같은 결론을 내렸다.</p>\n<h2 id=\"처리결과\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC%EA%B2%B0%EA%B3%BC\" aria-label=\"처리결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리결과</h2>\n<p>우선적으로 고객이 제외한 js파일에서 String.split함수에 대해서 오버라이딩이 되어있어 IE8이하에서 split(/\\s/)시 \"\"값이 포함된 배열이 반환되었다. 이러한 부분에 대해서 고객에게 split함수에 대해서 오버라이딩된 코드를 적용하도록 가이드하였다. 만약, 외부에서 IE8이하 브라우저를 지원해야하는 경우가 존재한다면 아래의 코드를 적용하면 된다.</p>\n<ul>\n<li>\n<p>코드</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/*!\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan &lt;stevenlevithan.com&gt;\n * Available under the MIT License\n * ECMAScript compliant, uniform cross-browser split method\n */\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * split(&#39;a b c d&#39;, &#39; &#39;);\n * // -&gt; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]\n *\n * // With limit\n * split(&#39;a b c d&#39;, &#39; &#39;, 2);\n * // -&gt; [&#39;a&#39;, &#39;b&#39;]\n *\n * // Backreferences in result array\n * split(&#39;..word1 word2..&#39;, /([a-z]+)(\\d+)/i);\n * // -&gt; [&#39;..&#39;, &#39;word&#39;, &#39;1&#39;, &#39; &#39;, &#39;word&#39;, &#39;2&#39;, &#39;..&#39;]\n */\nvar split;\n\n// Avoid running twice; that would break the `nativeSplit` reference\nsplit = split || function (undef) {\n\n    var nativeSplit = String.prototype.split,\n        compliantExecNpcg = /()??/.exec(&quot;&quot;)[1] === undef, // NPCG: nonparticipating capturing group\n        self;\n\n    self = function (str, separator, limit) {\n        // If `separator` is not a regex, use `nativeSplit`\n        if (Object.prototype.toString.call(separator) !== &quot;[object RegExp]&quot;) {\n            return nativeSplit.call(str, separator, limit);\n        }\n        var output = [],\n            flags = (separator.ignoreCase ? &quot;i&quot; : &quot;&quot;) +\n                    (separator.multiline  ? &quot;m&quot; : &quot;&quot;) +\n                    (separator.extended   ? &quot;x&quot; : &quot;&quot;) + // Proposed for ES6\n                    (separator.sticky     ? &quot;y&quot; : &quot;&quot;), // Firefox 3+\n            lastLastIndex = 0,\n            // Make `global` and avoid `lastIndex` issues by working with a copy\n            separator = new RegExp(separator.source, flags + &quot;g&quot;),\n            separator2, match, lastIndex, lastLength;\n        str += &quot;&quot;; // Type-convert\n        if (!compliantExecNpcg) {\n            // Doesn&#39;t need flags gy, but they don&#39;t hurt\n            separator2 = new RegExp(&quot;^&quot; + separator.source + &quot;$(?!\\\\s)&quot;, flags);\n        }\n        /* Values for `limit`, per the spec:\n         * If undefined: 4294967295 // Math.pow(2, 32) - 1\n         * If 0, Infinity, or NaN: 0\n         * If positive number: limit = Math.floor(limit); if (limit &gt; 4294967295) limit -= 4294967296;\n         * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n         * If other: Type-convert, then use the above rules\n         */\n        limit = limit === undef ?\n            -1 &gt;&gt;&gt; 0 : // Math.pow(2, 32) - 1\n            limit &gt;&gt;&gt; 0; // ToUint32(limit)\n        while (match = separator.exec(str)) {\n            // `separator.lastIndex` is not reliable cross-browser\n            lastIndex = match.index + match[0].length;\n            if (lastIndex &gt; lastLastIndex) {\n                output.push(str.slice(lastLastIndex, match.index));\n                // Fix browsers whose `exec` methods don&#39;t consistently return `undefined` for\n                // nonparticipating capturing groups\n                if (!compliantExecNpcg &amp;&amp; match.length &gt; 1) {\n                    match[0].replace(separator2, function () {\n                        for (var i = 1; i &lt; arguments.length - 2; i++) {\n                            if (arguments[i] === undef) {\n                                match[i] = undef;\n                            }\n                        }\n                    });\n                }\n                if (match.length &gt; 1 &amp;&amp; match.index &lt; str.length) {\n                    Array.prototype.push.apply(output, match.slice(1));\n                }\n                lastLength = match[0].length;\n                lastLastIndex = lastIndex;\n                if (output.length &gt;= limit) {\n                    break;\n                }\n            }\n            if (separator.lastIndex === match.index) {\n                separator.lastIndex++; // Avoid an infinite loop\n            }\n        }\n        if (lastLastIndex === str.length) {\n            if (lastLength || !separator.test(&quot;&quot;)) {\n                output.push(&quot;&quot;);\n            }\n        } else {\n            output.push(str.slice(lastLastIndex));\n        }\n        return output.length &gt; limit ? output.slice(0, limit) : output;\n    };\n\n    // For convenience\n    String.prototype.split = function (separator, limit) {\n        return self(this, separator, limit);\n    };\n\n    return self;\n\n}();</code></pre></div>\n</li>\n</ul>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<ol>\n<li>\n<p>정규식 테스트 사이트</p>\n<p><a href=\"https://www.regextester.com/105851\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Non breaking space - Regex Tester/Debugger</a></p>\n</li>\n<li>\n<p>MS 공식 사이트</p>\n<p><a href=\"https://docs.microsoft.com/en-us/previous-versions//1400241x(v=vs.85)?redirectedfrom=MSDN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Regular Expression Syntax (Scripting)</a></p>\n</li>\n<li>\n<p>split 함수 재정의코드</p>\n<p><a href=\"http://blog.stevenlevithan.com/archives/cross-browser-split\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript split Bugs: Fixed!</a></p>\n</li>\n</ol>","excerpt":"split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제 고객이 네트워크 속도 문제로 인해 필요없는 파일을 load하지 않기로 하였다. 이에 대해서 특정 js파일을 load제외하였는데 그로인해 IE8에서 textsize…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/IE8-Split-Bug/#split%ED%95%A8%EC%88%98%EC%97%90-regex%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B0%92%EC%9D%B4-return%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%AC%B8%EC%A0%9C\">split()함수에 Regex를 사용 시 \"\"값이 return되지 않는 문제</a></p>\n<ul>\n<li><a href=\"/IE8-Split-Bug/#%ED%85%8C%EC%8A%A4%ED%8A%B8\">테스트</a></li>\n<li><a href=\"/IE8-Split-Bug/#%ED%95%B4%EA%B2%B0%EB%B0%A9%EC%95%88\">해결방안</a></li>\n<li>\n<p><a href=\"/IE8-Split-Bug/#%EC%B2%98%EB%A6%AC%EA%B2%B0%EA%B3%BC\">처리결과</a></p>\n<ul>\n<li><a href=\"/IE8-Split-Bug/#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/IE8-Split-Bug/"},"frontmatter":{"title":"IE8 Split Bug","date":"Mar 03, 2020","tags":["IE","Split","Browser Bug"],"keywords":["IE8","Split Bug","Browser Bug"]}}},"pageContext":{"slug":"/IE8-Split-Bug/","series":[]}}}