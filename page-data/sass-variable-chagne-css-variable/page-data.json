{"componentChunkName":"component---src-templates-post-tsx","path":"/sass-variable-chagne-css-variable/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"scss변수-→-css변수로-build하기\" style=\"position:relative;\"><a href=\"#scss%EB%B3%80%EC%88%98-%E2%86%92-css%EB%B3%80%EC%88%98%EB%A1%9C-build%ED%95%98%EA%B8%B0\" aria-label=\"scss변수 → css변수로 build하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scss변수 → css변수로 build하기</h2>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>사내 프로젝트에서 style의 경우 <code class=\"language-text\">scss</code>를 사용하여 개발을 진행하고 있었는데, style만을 사용자에게 제공해야하는 경우가 생겼다. 기존의 방식은 <code class=\"language-text\">*.umd.js</code>파일로 통합되어 배포되고 있는 부분에 추가적으로 style을 배포해야하는데, scss변수를 css변수로 전환하는 부분에서 삽질을 많이하여, 도움이 되고자 기록을 남긴다.</p>\n<h3 id=\"해결-과정\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\" aria-label=\"해결 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 과정</h3>\n<p>우선, 프로젝트에서는 webpack을 사용해 bundle을 하고 있기 때문에 loader에서 변수를 convert해주는 부분이 존재하는지 찾아보았다.</p>\n<ol>\n<li>\n<p><strong><del>webpack loader 유/무</del></strong></p>\n<ul>\n<li>scss-loader를 사용하고 있는데, 옵션으로 제공되는 부분을 서칭 → 미제공</li>\n<li>추가적인 loader를 검색. <code class=\"language-text\">sass-resources-loader</code>를 찾았으나, css변수로 변환 X</li>\n</ul>\n</li>\n<li>\n<p><strong><del>수동으로 parsing 후 file 생성</del></strong></p>\n<ul>\n<li>loader가 없을 시 수동으로 parsing을 해야겠다고 생각하였고, 특정 <code class=\"language-text\">*.scss</code>를 node에서 읽어와서 parsing하여 <code class=\"language-text\">*.css</code> file을 생성하도록 구현하였다.</li>\n<li>이렇게 적용하던 중, 다른 프로젝트를 염탐하다가 build로 css 변수로 전환하는 프로젝트를 발견해서 이를 분석하기 시작했다.(<a href=\"https://github.com/material-components/material-components-web/blob/master/packages/mdc-theme/_theme.scss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">material-design</a>)</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">*.scss</code>에 css문법으로 정의한 파일추가</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">*.scss</code>파일에서 아래와 같이 css문법으로 정의하여 build에 포함</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@import</span> <span class=\"token string\">\"color.scss\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sass 변수가 정의된 file</span>\n\n<span class=\"token selector\">:root </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--primary100</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">#{$primary100}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>위와 같이 css문법으로 정의한 file을 생성 후, webpack config파일의 entry에 포함 후 build를 하였더니 수동 parsing보다 깔끔하게 해결되었다!</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">*.scss</code>에 css문법으로 정의한 파일추가 할 것</strong></p>\n<ul>\n<li><code class=\"language-text\">*.scss</code>파일을 생성 후 import한 scss변수를 정의한 css변수에 할당(<a href=\"https://sass-lang.com/documentation/breaking-changes/css-vars\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">관련 sass공식사이트</a>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@import</span> <span class=\"token string\">\"color.scss\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//scss 변수가 정의된 file</span>\n\n<span class=\"token selector\">:root </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--primary100</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">#{$primary100}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>webpack config파일의 entry에 포함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/index.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"styles/variable.scss\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"기타-팁\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%ED%8C%81\" aria-label=\"기타 팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 팁</h2>\n<ol>\n<li>\n<p><strong>Webpack bundle시 css file 생성하는 법</strong></p>\n<ul>\n<li><code class=\"language-text\">MiniCssExtractPlugin</code> 플러그인을 사용 (<a href=\"https://webpack.js.org/plugins/mini-css-extract-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">설정방법</a>)</li>\n<li>\n<p>webpack에 아래와 같이 가장 최상위에 플러그인을 위치</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\nrules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.(sa|sc|c)ss$/</span><span class=\"token punctuation\">,</span>\n    use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Webpack dart-sass설정</strong></p>\n<p>sass에서 @use, @forward, ... 등 여러 문법 등을 사용하기 위해서는 node-sass가 아닌 dart-sass를 사용해야하며, 추후 <code class=\"language-text\">sass-loader</code>의 경우 dart-sass만 지원을 하기로 예정되어있으므로 dart-sass사용은 필수가 되었다.</p>\n<ul>\n<li>\n<p>dart-sass 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D sass</code></pre></div>\n</li>\n<li>\n<p>webpack config 설정(<a href=\"https://webpack.js.org/loaders/sass-loader/#implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식사이트</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nmodule<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.s[ac]ss$/i</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          loader<span class=\"token operator\">:</span> <span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            implementation<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;- 이 부분을 추가하면 된다.</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>dart-sass를 통해 작성된 <code class=\"language-text\">*.scss</code>파일의 경우 사용하는 측에서도 dart-sass를 지원해야 사용 가능하다.</li>\n</ul>\n</li>\n<li>\n<p><strong>sass map을 사용하여 css변수 정의를 편하게 하기</strong></p>\n<ul>\n<li>css변수로 변경 시 변수를 일일이 입력하는 하드코딩이 필요하다.</li>\n<li>\n<p>이러한 부분을 간결화하고 추후 입력을 안해도 되도록 sass map을 사용하여, 구현하자</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">//variable.scss</span>\n<span class=\"token property\"><span class=\"token variable\">$colors</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token statement keyword\">!default</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$colors</span></span><span class=\"token punctuation\">:</span> map-merge <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"yellow100\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"light\"</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"yellow200\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"light\"</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token variable\">$colors</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">//css-variable.scss</span>\n<span class=\"token atrule\"><span class=\"token rule\">@use</span> <span class=\"token string\">\"variable\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">:</span>root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@each</span> <span class=\"token selector\"><span class=\"token variable\">$name</span>, <span class=\"token variable\">$map</span> in variable.<span class=\"token variable\">$colors</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@each</span> <span class=\"token selector\"><span class=\"token variable\">$mode</span>, <span class=\"token variable\">$color</span> in <span class=\"token variable\">$map</span> </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">--<span class=\"token variable\">#{$mode}</span>-<span class=\"token variable\">#{$name}</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">#{$color}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>위와 같이 구현 시의 장점은 css변수로 변환하는 부분에 대해서 더 이상 신경쓰지 않아도 된다는 점이다. 또한, scss변수를 map으로 관리함으로써 가독성 또한, 명확해 진다.</li>\n</ul>\n</li>\n</ol>","excerpt":"Scss변수 → css변수로 build하기 개요 사내 프로젝트에서 style의 경우 를 사용하여 개발을 진행하고 있었는데, style만을 사용자에게 제공해야하는 경우가 생겼다. 기존의 방식은 파일로 통합되어 배포되고 있는 부분에 추가적으로 style…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/sass-variable-chagne-css-variable/#scss%EB%B3%80%EC%88%98-%E2%86%92-css%EB%B3%80%EC%88%98%EB%A1%9C-build%ED%95%98%EA%B8%B0\">Scss변수 → css변수로 build하기</a></p>\n<ul>\n<li><a href=\"/sass-variable-chagne-css-variable/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"/sass-variable-chagne-css-variable/#%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\">해결 과정</a></li>\n</ul>\n</li>\n<li><a href=\"/sass-variable-chagne-css-variable/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n<li><a href=\"/sass-variable-chagne-css-variable/#%EA%B8%B0%ED%83%80-%ED%8C%81\">기타 팁</a></li>\n</ul>","fields":{"slug":"/sass-variable-chagne-css-variable/"},"frontmatter":{"title":"Scss변수 → css변수로 build하기","date":"Oct 20, 2020","tags":["webpack","scss build"],"keywords":["webpack","sass","scss","scss build","scss variable","css variable","scss variable change css variable"]}}},"pageContext":{"slug":"/sass-variable-chagne-css-variable/","series":[]}},"staticQueryHashes":["3649515864","63159454"]}