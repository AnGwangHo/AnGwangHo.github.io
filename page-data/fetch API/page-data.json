{"componentChunkName":"component---src-templates-post-tsx","path":"/fetch API/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"fetch-api-학습\" style=\"position:relative;\"><a href=\"#fetch-api-%ED%95%99%EC%8A%B5\" aria-label=\"fetch api 학습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch API 학습</h2>\n<hr>\n<h3 id=\"개념\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90\" aria-label=\"개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념</h3>\n<ul>\n<li>기존 XMLHttpRequest(이하 XHR)를 대체하는 개념으로 Request나 Response를 포함하며 결과값으로 Promise객체를 반환합니다.</li>\n<li>XHR에서 Response를 확인하기 위하여 callback이나 event를 사용하던 부분을 .then(), .catch()를 사용하여 확인합니다.</li>\n<li>\n<p>ajax와 유사해 보이지만 다른 부분이 존재</p>\n<ol>\n<li>결과값인 Promise 객체는 HTTP error 상태를 reject하지 않음</li>\n<li>Status Code가 404나 500인 경우 resolve처리. ok상태가 false인 resolve를 반환</li>\n<li>네트워크 장애, 요청 미완료 시 reject 반환</li>\n<li>쿠키를 보내거나 받지 않음</li>\n<li>CORS 및 쿠키 사용시에는 Header에 credentials 속성을 설정해줘야 함</li>\n</ol>\n</li>\n<li>미지원 브라우저의 경우 <a href=\"https://github.com/github/fetch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fetch Polyfill</a>사용하여 구현가능</li>\n</ul>\n<h3 id=\"문법\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%B2%95\" aria-label=\"문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법</h3>\n<ol>\n<li>\n<p>Syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//URL : 통신 요청할 서버주소</span>\n<span class=\"token comment\">//option : 객체를 넘기며 method, headers, body... 와 같은 properyt를 설정한다.</span></code></pre></div>\n</li>\n<li>\n<p>사용법</p>\n<p>아래와 같이 URL을 입력 후 성공, 실패에 대한 동작정의를 then(), catch() 메소드를 사용하여 처리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Get방식</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/movies.json'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//서버 주소를 첫 번째 인자로 넘김</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//통신 성공 시 수행 할 코드</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//error 발생 시 예외처리 할 코드</span>\n\n<span class=\"token comment\">//Post방식</span>\n<span class=\"token keyword\">const</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  method <span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  body <span class=\"token operator\">:</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n  header <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/movies.json'</span><span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">)</span> <span class=\"token comment\">//두 번째 인자에 객체를 인자로 전달한다</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//통신 성공 시 수행 할 코드</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//error 발생 시 예외처리 할 코드</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"관련-인터페이스\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"관련 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 인터페이스</h3>\n<ol>\n<li>\n<p>Headers</p>\n<ul>\n<li>Headers() 생성자를 사용해 헤더 객체를 생성가능</li>\n<li>\n<p>Key와 Value로 이루어진 multi-map구조</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//1. set(), append() 메소드를 사용하여 property 추가</span>\n<span class=\"token keyword\">var</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//기존의 동일한 property가 존재시 덮어쓰기</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Custom-Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ProcessThisImmediately\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2. 생성자에 인자로 전달</span>\nmyHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Content-Length\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"X-Custom-Header\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ProcessThisImmediately\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//3. has(), get(), getAll() 메소드로 value 확인</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 11</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Custom-Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AnotherValue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Custom-Header\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"ProcessThisImmediately\", \"AnotherValue\"]</span>\n\n<span class=\"token comment\">//4. delete()로 삭제</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Custom-Header\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Request</p>\n<ul>\n<li>\n<p>fetch()에 직접 URL, option을 입력하는 것을 대체해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Request(URL, [option])</span>\n<span class=\"token comment\">//URL : 서버 주소</span>\n<span class=\"token comment\">//option : method, headers, body... etc fetch의 두 번째 인자를 대체</span>\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/posts\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\nmethod<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\nheaders<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//Headers 인터페이스 사용 or 직접 객체입력</span>\n<span class=\"token string\">\"content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nbody<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//Body 인터페이스로 대체 가능</span>\nname<span class=\"token operator\">:</span> <span class=\"token string\">\"LeeHanur\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Response</p>\n<ul>\n<li>fetch()에서는 resolve 됬을 때 Response 인스턴스를 반환한다.</li>\n<li>\n<p>생성자로 객체 생성하여 사용 가능하나 ServiceWorkers에서 사용할 것이 아니면 굳이 생성하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Response 상수</span>\n\nResponse<span class=\"token punctuation\">.</span>status <span class=\"token comment\">//HTTP Status의 정수치, 기본값 200</span>\nResponse<span class=\"token punctuation\">.</span>statusText <span class=\"token comment\">//HTTP Status 코드의 메서드와 일치하는 문자열, 기본값은 \"OK\"</span>\nResponse<span class=\"token punctuation\">.</span>ok <span class=\"token comment\">//HTTP Status 코드가 200~299 값 인지에 대하여 Boolean를 반환</span>\n\n<span class=\"token keyword\">var</span> myResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//body : null 허용, Blob|BufferSource... etc 응답된 body의 type을 정의</span>\n<span class=\"token comment\">//init : status, statusText, headers 3가지 property 설정가능</span>\n\n<span class=\"token keyword\">var</span> myBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> init <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"status\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"statusText\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"SuperSmashingGreat!\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>myBlob<span class=\"token punctuation\">,</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>body</p>\n<ul>\n<li>\n<p>Request, Response 둘 다 Body를 가지고 있으며, body는 아래에서 기술한 타입들 중 하나의 인스턴스입니다.</p>\n<ul>\n<li>ArrayBuffer</li>\n<li>ArrayBufferView (Uint8Array같은 TypedArray)</li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Blob\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blob</a>/File</li>\n<li>문자열</li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">URLSearchParams</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/FormData\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FormData</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login-form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\nmethod<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\nbody<span class=\"token operator\">:</span> form\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Fetch_API/Fetch%EC%9D%98_%EC%82%AC%EC%9A%A9%EB%B2%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Fetch</a></li>\n<li><a href=\"https://medium.com/@kkak10/javascript-fetch-api-e26bfeaad9b6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Javascript Fetch API</a></li>\n</ul>","excerpt":"Fetch API 학습 개념 기존 XMLHttpRequest(이하 XHR)를 대체하는 개념으로 Request나 Response를 포함하며 결과값으로 Promise객체를 반환합니다. XHR에서 Response를 확인하기 위하여 callback…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/fetch%20API/#fetch-api-%ED%95%99%EC%8A%B5\">Fetch API 학습</a></p>\n<ul>\n<li><a href=\"/fetch%20API/#%EA%B0%9C%EB%85%90\">개념</a></li>\n<li><a href=\"/fetch%20API/#%EB%AC%B8%EB%B2%95\">문법</a></li>\n<li><a href=\"/fetch%20API/#%EA%B4%80%EB%A0%A8-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">관련 인터페이스</a></li>\n<li><a href=\"/fetch%20API/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/fetch API/"},"frontmatter":{"title":"fetch API","date":"Mar 11, 2020","tags":["fetch","Javascript"],"keywords":["fetch","Javascript"]}}},"pageContext":{"slug":"/fetch API/","series":[]}},"staticQueryHashes":["3649515864","63159454"]}